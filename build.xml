<?xml version="1.0"?>
<project name="TechDivision_Runtime" default="deploy" basedir=".">

    <property environment="env" />

    <property name="lib.dir" value="${basedir}/lib" />
    <property name="custom-lib.dir" value="${basedir}/custom-lib" />
    <property name="php-src.dir" value="${basedir}/src" />
    <property name="php-test.dir" value="${basedir}/tests" />
    <property name="php-target.dir" value="${basedir}/target"/>

    <property file="${basedir}/build.properties"/>
    <property file="${user.home}/build.properties"/>
    <property file="${basedir}/build.default.properties"/>
    <property file="${basedir}/build.${os.family}.${os.distribution}.properties"/>
    <property file="${basedir}/build.${os.family}.properties"/>

    <!-- ==================================================================== -->
    <!-- Cleans the directories with the generated source files				  -->
    <!-- ==================================================================== -->
    <target name="clean" description="Cleans build directory in preparation for new build.">
        <delete dir="${php-target.dir}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares all the required directories								  -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean" description="Prepares all the required directories.">
        <mkdir dir="${php-target.dir}" />
        <mkdir dir="${lib.dir}" />
        <mkdir dir="${custom-lib.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the sources to the target directory							  -->
    <!-- ==================================================================== -->
    <target name="copy" depends="prepare" description="Copies the sources to the target directory.">
        <copy todir="${php-target.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*" />
                <exclude name="etc/**/*"/>
            </fileset>
        </copy>
        <copy todir="${php-target.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="etc/**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>
    <!-- ==================================================================== -->
    <!-- Copies the sources to the deploy directory     					  -->
    <!-- ==================================================================== -->
    <target name="deploy" depends="copy" description="Copies the sources to the deploy directory.">
        <copy todir="${dir.www}/${deploy.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-target.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Generates the API documentation                                      -->
    <!-- ==================================================================== -->
    <target name="apidoc" description="Generates the API documentation.">
        <exec executable="phpdoc">
            <arg line="-ct type -ue on -s on -t ${php-target.dir}/docs -o HTML:frames:earthli -d ${php-src.dir}/app/code/core"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the code sniffer and generates a report                         -->
    <!-- ==================================================================== -->
    <target name="phpcs" depends="apidoc" description="Runs the code sniffer and generates a report.">
        <exec executable="phpcs" output="${php-target.dir}/reports/checkstyle.xml">
            <arg line="--standard=ZEND --report=checkstyle ${php-src.dir}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the copy and paste detection                                    -->
    <!-- ==================================================================== -->
    <target name="phpcpd" depends="phpcs" description="Runs the copy and paste detection.">
        <exec executable="phpcpd">
            <arg line="--log-pmd ${php-target.dir}/reports/pmd-cpd.xml ${php-src.dir}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Generate phploc.csv                                                  -->
    <!-- ==================================================================== -->
    <target name="phploc" depends="phpcpd" description="Generate phploc.csv">
        <exec executable="phploc">
            <arg line="--log-xml ${php-target.dir}/reports/phploc.xml ${php-src.dir}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPDepend tool and generats a graphs                        -->
    <!-- ==================================================================== -->
    <target name="pdepend" depends="phploc" description="Runs the PHPDepend tool and generats a graphs.">
        <exec executable="pdepend">
            <arg line="--summary-xml=${php-target.dir}/reports/pdepend.xml --jdepend-xml=${php-target.dir}/reports/jdepend.xml --jdepend-chart=${php-target.dir}/reports/jdepend.svg --overview-pyramid=${php-target.dir}/reports/pdepend-pyramid.svg ${php-src.dir}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHP mess detector tool                                      -->
    <!-- ==================================================================== -->
    <target name="phpmd" depends="pdepend" description="Runs the PHP Mess detector tool.">
        <exec executable="phpmd">
            <arg line="${php-src.dir} xml codesize,unusedcode --reportfile ${php-target.dir}/reports/pmd.xml" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the test sources to the target directory					  -->
    <!-- ==================================================================== -->
    <target name="copy-tests" depends="copy" description="Copies the test sources to the target directory.">
        <copy todir="${php-target.dir}">
            <fileset dir="${php-test.dir}">
                <include name="**/*" />
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit tests and generates a report                        -->
    <!-- ==================================================================== -->
    <target name="run-tests" depends="copy-tests" description="Runs the PHPUnit tests and generates a report.">
        <exec executable="phpunit" dir="${php-target.dir}">
            <arg line="--bootstrap bootstrap.php --configuration phpunit.xml.dist" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit tests and generates a report						  -->
    <!-- ==================================================================== -->
    <target name="build" description="Runs the PHPUnit tests and generates a report.">
        <antcall target="phpmd"/>
        <antcall target="run-tests"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PHP source package has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-php-src-present" description="Check if PHP Source Package has been downloaded yet.">
        <available file="${lib.dir}/php-${appserver.php.version}.tar.gz" property="php-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if the memcached server source package has been downloaded yet -->
    <!-- ==================================================================== -->
    <target name="check-memcached-server-src-present" description="Check if the memcached server source package has been downloaded yet.">
        <available file="${lib.dir}/php-${memcached.server.version}.tar.gz" property="memcached-server-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if the httpd server source package has been downloaded yet     -->
    <!-- ==================================================================== -->
    <target name="check-httpd-server-src-present" description="Check if the httpd server source package has been downloaded yet.">
        <available file="${lib.dir}/httpd-${httpd.server.version}.tar.gz" property="httpd-server-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if the nginx server source package has been downloaded yet     -->
    <!-- ==================================================================== -->
    <target name="check-nginx-server-src-present" description="Check if the nginx server source package has been downloaded yet.">
        <available file="${lib.dir}/nginx-${nginx.server.version}.tar.gz" property="nginx-server-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL memcached sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-memcached-src-present" description="Check if PECL memcached sources has been downloaded yet.">
        <available file="${lib.dir}/memcached-${appserver.memcached.version}.tgz" property="memcached-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL memcache sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-memcache-src-present" description="Check if PECL memcache sources has been downloaded yet.">
        <available file="${lib.dir}/memcache-${appserver.memcache.version}.tgz" property="memcache-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL pthreads sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-pthreads-src-present" description="Check if PECL pthreads sources has been downloaded yet.">
        <available file="${lib.dir}/pthreads-${appserver.pthreads.version}.tgz" property="pthreads-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL apcu sources has been downloaded yet               -->
    <!-- ==================================================================== -->
    <target name="check-apcu-src-present" description="Check if PECL apcu sources has been downloaded yet.">
        <available file="${lib.dir}/apcu-${appserver.apcu.version}.tgz" property="apcu-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL redis sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-redis-src-present" description="Check if PECL redis sources has been downloaded yet.">
        <available file="${lib.dir}/redis-${appserver.redis.version}.tgz" property="redis-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL xdebug sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-xdebug-src-present" description="Check if PECL xdebug sources has been downloaded yet.">
        <available file="${lib.dir}/xdebug-${appserver.xdebug.version}.tgz" property="xdebug-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL libevent sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libevent-src-present" description="Check if PECL libevent sources has been downloaded yet.">
        <available file="${lib.dir}/libevent-${appserver.libevent.version}.tgz" property="libevent-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL libev sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libev-src-present" description="Check if PECL libev sources has been downloaded yet.">
        <available file="${lib.dir}/libev-${appserver.libev.version}.zip" property="libev-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL ev sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-ev-src-present" description="Check if PECL ev sources has been downloaded yet.">
        <available file="${lib.dir}/ev-${appserver.ev.version}.zip" property="ev-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL event sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-event-src-present" description="Check if PECL event sources has been downloaded yet.">
        <available file="${lib.dir}/event-${appserver.event.version}.zip" property="event-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL operator sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-operator-src-present" description="Check if PECL operator sources has been downloaded yet.">
        <available file="${lib.dir}/operator-${appserver.operator.version}.tgz" property="operator-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL pecl_http sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-pecl_http-src-present" description="Check if PECL pecl_http sources has been downloaded yet.">
        <available file="${lib.dir}/pecl_http-${appserver.pecl_http.version}.tgz" property="pecl_http-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if ext-appserver sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-ext-appserver-src-present" description="Check if ext appserver sources has been downloaded yet.">
        <available file="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" property="ext-appserver-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL AOP sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-AOP-src-present" description="Check if PECL AOP sources has been downloaded yet.">
        <available file="${lib.dir}/AOP-${appserver.AOP.version}.tgz" property="AOP-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libfreetype sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libfreetype-src-present" description="Check if libfreetype sources has been downloaded yet.">
        <available file="${lib.dir}/freetype-${libfreetype.version}.tgz" property="libfreetype-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libmemcached sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libmemcached-src-present" description="Check if libmemcached sources has been downloaded yet.">
        <available file="${lib.dir}/libmemcached-${libmemcached.version}.tgz" property="libmemcached-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libmcrypt sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libmcrypt-src-present" description="Check if libmcrypt sources has been downloaded yet.">
        <available file="${lib.dir}/libmcrypt-${libmcrypt.version}.tgz" property="libmcrypt-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if readline sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-readline-src-present" description="Check if readline sources has been downloaded yet.">
        <available file="${lib.dir}/readline-${readline.version}.tar.gz" property="readline-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libpng sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-libpng-src-present" description="Check if libpng sources has been downloaded yet.">
        <available file="${lib.dir}/libpng-${libpng.version}.tgz" property="libpng-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libjpeg sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libjpeg-src-present" description="Check if libjpeg sources has been downloaded yet.">
        <available file="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" property="libjpeg-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if pcre sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-pcre-src-present" description="Check if pcre sources has been downloaded yet.">
        <available file="${lib.dir}/pcre-${pcre.version}.tar.gz" property="pcre-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libevent library sources has been downloaded yet   		  -->
    <!-- ==================================================================== -->
    <target name="check-libevent-library-src-present" description="Check if libevent library sources has been downloaded yet.">
        <available file="${lib.dir}/libevent-${libevent.version}.tar.gz" property="libevent-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if the redis server source package has been downloaded yet     -->
    <!-- ==================================================================== -->
    <target name="check-redis-server-src-present" description="Check if the redis server source package has been downloaded yet.">
        <available file="${lib.dir}/redis-${redis.server.version}.zip" property="redis-server-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if openssl sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-openssl-src-present" description="Check if openssl sources has been downloaded yet.">
        <available file="${lib.dir}/openssl-${openssl.version}.tar.gz" property="openssl-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PHP source package by given version number		  		          -->
    <!-- ==================================================================== -->
    <target name="get-php-src" depends="check-php-src-present" unless="${php-src.present}" description="Get PHP source package by given version number">
        <get src="http://de1.php.net/get/php-${appserver.php.version}.tar.gz/from/this/mirror" dest="${lib.dir}/php-${appserver.php.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL memcached source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-memcached-src" depends="check-memcached-src-present" unless="${memcached-src.present}" description="Get PECL memcached source package by given version number">
        <get src="http://pecl.php.net/get/memcached-${appserver.memcached.version}.tgz" dest="${lib.dir}/memcached-${appserver.memcached.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL memcache source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-memcache-src" depends="check-memcache-src-present" unless="${memcache-src.present}" description="Get PECL memcache source package by given version number">
        <get src="http://pecl.php.net/get/memcache-${appserver.memcache.version}.tgz" dest="${lib.dir}/memcache-${appserver.memcache.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL pthreads source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-pthreads-src" depends="check-pthreads-src-present" unless="${pthreads-src.present}" description="Get PECL pthreads source package by given version number">
        <get src="http://pecl.php.net/get/pthreads-${appserver.pthreads.version}.tgz" dest="${lib.dir}/pthreads-${appserver.pthreads.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL apcu source package by given version number                 -->
    <!-- ==================================================================== -->
    <target name="get-apcu-src" depends="check-apcu-src-present" unless="${apcu-src.present}" description="Get PECL apcu source package by given version number">
        <get src="http://pecl.php.net/get/apcu-${appserver.apcu.version}.tgz" dest="${lib.dir}/apcu-${appserver.apcu.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL redis source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-redis-src" depends="check-redis-src-present" unless="${redis-src.present}" description="Get PECL redis source package by given version number">
        <get src="http://pecl.php.net/get/redis-${appserver.redis.version}.tgz" dest="${lib.dir}/redis-${appserver.redis.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL libevent source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-libevent-src" depends="check-libevent-src-present" unless="${libevent-src.present}" description="Get PECL libevent source package by given version number">
        <get src="http://pecl.php.net/get/libevent-${appserver.libevent.version}.tgz" dest="${lib.dir}/libevent-${appserver.libevent.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL ev source package by given version number		              -->
    <!-- ==================================================================== -->
    <target name="get-ev-src" depends="check-ev-src-present" unless="${ev-src.present}" description="Get PECL ev source package by given version number">
        <get src="http://pecl.php.net/get/ev-${appserver.ev.version}.tgz" dest="${lib.dir}/ev-${appserver.ev.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL event source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-event-src" depends="check-event-src-present" unless="${event-src.present}" description="Get PECL event source package by given version number">
        <get src="http://pecl.php.net/get/event-${appserver.event.version}.tgz" dest="${lib.dir}/event-${appserver.event.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL libev source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-libev-src" depends="check-libev-src-present" unless="${libev-src.present}" description="Get PECL libev source package by given version number">
        <get src="https://github.com/whatthejeff/php-libev/archive/${appserver.libev.version}.zip" dest="${lib.dir}/libev-${appserver.libev.version}.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL operator source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-operator-src" depends="check-operator-src-present" unless="${operator-src.present}" description="Get PECL operator source package by given version number">
        <get src="http://pecl.php.net/get/operator-${appserver.operator.version}.tgz" dest="${lib.dir}/operator-${appserver.operator.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL pecl_http source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-pecl_http-src" depends="check-pecl_http-src-present" unless="${pecl_http-src.present}" description="Get PECL pecl_http source package by given version number">
        <get src="http://pecl.php.net/get/pecl_http-${appserver.pecl_http.version}.tgz" dest="${lib.dir}/pecl_http-${appserver.pecl_http.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL AOP source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-AOP-src" depends="check-AOP-src-present" unless="${AOP-src.present}" description="Get PECL AOP source package by given version number">
        <get src="http://pecl.php.net/get/AOP-${appserver.AOP.version}.tgz" dest="${lib.dir}/AOP-${appserver.AOP.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL xdebug source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-xdebug-src" depends="check-xdebug-src-present" unless="${xdebug-src.present}" description="Get PECL xdebug source package by given version number">
        <get src="http://pecl.php.net/get/xdebug-${appserver.xdebug.version}.tgz" dest="${lib.dir}/xdebug-${appserver.xdebug.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL appserver source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-ext-appserver-src" depends="check-ext-appserver-src-present" unless="${ext-appserver-src.present}" description="Get php ext appserver source package by given version number">
        <get src="https://github.com/techdivision/php-ext-appserver/releases/download/v${appserver.ext-appserver.version}-beta/appserver-${appserver.ext-appserver.version}.tgz" dest="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get memcached server source package by given version number		  -->
    <!-- ==================================================================== -->
    <target name="get-memcached-server-src" depends="check-memcached-server-src-present" unless="${memcached-server-src.present}" description="Get memcached server source package by given version number.">
        <get src="${memcached.server.download.url}" dest="${lib.dir}/memcached-${memcached.server.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libfreetype source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libfreetype-src" depends="check-libfreetype-src-present" unless="${libfreetype-src.present}" description="Get libfreetype source package by given version number.">
        <get src="${libfreetype.download.url}" dest="${lib.dir}/freetype-${libfreetype.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libmemcached source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-libmemcached-src" depends="check-libmemcached-src-present" unless="${libmemcached-src.present}" description="Get libmemcached source package by given version number.">
        <get src="${libmemcached.download.url}" dest="${lib.dir}/libmemcached-${libmemcached.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libmcrypt source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libmcrypt-src" depends="check-libmcrypt-src-present" unless="${libmcrypt-src.present}" description="Get libmcrypt source package by given version number.">
        <get src="${libmcrypt.download.url}" dest="${lib.dir}/libmcrypt-${libmcrypt.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get readline source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-readline-src" depends="check-readline-src-present" unless="${readline-src.present}" description="Get readline source package by given version number.">
        <get src="${readline.download.url}" dest="${lib.dir}/readline-${readline.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libpng source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libpng-src" depends="check-libpng-src-present" unless="${libpng-src.present}" description="Get libpng source package by given version number.">
        <get src="${libpng.download.url}" dest="${lib.dir}/libpng-${libpng.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libjpeg source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libjpeg-src" depends="check-libjpeg-src-present" unless="${libjpeg-src.present}" description="Get libjpeg source package by given version number.">
        <get src="${libjpeg.download.url}" dest="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libevent source package by given version number		  -->
    <!-- ==================================================================== -->
    <target name="get-libevent-library-src" depends="check-libevent-library-src-present" unless="${libevent-library-src.present}" description="Get libevent source package by given version number.">
        <get src="${libevent.download.url}" dest="${lib.dir}/libevent-${libevent.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get httpd server source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-httpd-server-src" depends="check-httpd-server-src-present" unless="${httpd-server-src.present}" description="Get httpd server source package by given version number.">
        <get src="${httpd.server.download.url}" dest="${lib.dir}/httpd-${httpd.server.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get nginx server source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-nginx-server-src" depends="check-nginx-server-src-present" unless="${nginx-server-src.present}" description="Get nginx server source package by given version number.">
        <get src="${nginx.server.download.url}" dest="${lib.dir}/nginx-${nginx.server.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get redis server source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-redis-server-src" depends="check-redis-server-src-present" unless="${redis-server-src.present}" description="Get redis server source package by given version number.">
        <get src="${redis.server.download.url}" dest="${lib.dir}/redis-${redis.server.version}.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get pcre source package by given version number		              -->
    <!-- ==================================================================== -->
    <target name="get-pcre-src" depends="check-pcre-src-present" unless="${pcre-src.present}" description="Get pcre source package by given version number.">
        <get src="${pcre.download.url}" dest="${lib.dir}/pcre-${pcre.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get openssl source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-openssl-src" depends="check-openssl-src-present" unless="${openssl-src.present}" description="Get openssl source package by given version number.">
        <get src="${openssl.download.url}" dest="${lib.dir}/openssl-${openssl.version}.tar.gz"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PHP sources for the runtime                             -->
    <!-- ==================================================================== -->
    <target name="prepare-source" depends="prepare" description="Prepares the PHP sources for the runtime.">
        <!-- prepare PHP sources -->
        <antcall target="get-php-src"/>
        <untar src="${lib.dir}/php-${appserver.php.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/php-${appserver.php.version}/build" includes="**/*"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PECL sources for static compilation (not active!!)      -->
    <!-- ==================================================================== -->
    <target name="prepare-pecl-extension" description="Prepares the PECL sources for static compilation (not active!!)">
        <!-- prepare php ext appserver sources sources for static compilation -->
        <antcall target="get-ext-appserver-src"/>
        <untar src="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/appserver">
            <fileset dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}"/>
        </move>
        <!-- prepare PECL memcached sources sources for static compilation -->
        <antcall target="get-memcached-src"/>
        <untar src="${lib.dir}/memcached-${appserver.memcached.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/memcached">
            <fileset dir="${php-target.dir}/memcached-${appserver.memcached.version}"/>
        </move>
        <!-- prepare PECL memcache sources sources for static compilation -->
        <antcall target="get-memcache-src"/>
        <untar src="${lib.dir}/memcache-${appserver.memcache.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/memcache">
            <fileset dir="${php-target.dir}/memcache-${appserver.memcache.version}"/>
        </move>
        <!-- prepare PECL pthread sources for static compilation -->
        <antcall target="get-pthreads-src"/>
        <untar src="${lib.dir}/pthreads-${appserver.pthreads.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/pthreads">
            <fileset dir="${php-target.dir}/pthreads-${appserver.pthreads.version}"/>
        </move>
        <!-- prepare PECL apcu sources for static compilation -->
        <antcall target="get-apcu-src"/>
        <untar src="${lib.dir}/apcu-${appserver.apcu.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/apcu">
            <fileset dir="${php-target.dir}/apcu-${appserver.apcu.version}"/>
        </move>
        <!-- prepare PECL operator sources for static compilation -->
        <antcall target="get-operator-src"/>
        <untar src="${lib.dir}/operator-${appserver.operator.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/operator">
            <fileset dir="${php-target.dir}/operator-${appserver.operator.version}"/>
        </move>
        <!-- prepare PECL pecl_http sources for static compilation -->
        <antcall target="get-pecl_http-src"/>
        <untar src="${lib.dir}/pecl_http-${appserver.pecl_http.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/http">
            <fileset dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}"/>
        </move>
        <!-- prepare PECL AOP sources for static compilation -->
        <antcall target="get-AOP-src"/>
        <untar src="${lib.dir}/AOP-${appserver.AOP.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/AOP">
            <fileset dir="${php-target.dir}/AOP-${appserver.AOP.version}"/>
        </move>
        <!-- prepare PECL libevent sources for static compilation -->
        <antcall target="get-libevent-src"/>
        <untar src="${lib.dir}/libevent-${appserver.libevent.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/libevent">
            <fileset dir="${php-target.dir}/libevent-${appserver.libevent.version}"/>
        </move>
        <!-- prepare PECL redis sources for static compilation -->
        <antcall target="get-redis-src"/>
        <untar src="${lib.dir}/redis-${appserver.redis.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/redis">
            <fileset dir="${php-target.dir}/redis-${appserver.redis.version}"/>
        </move>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libjpeg sources for the runtime                         -->
    <!-- ==================================================================== -->
    <target name="build-libjpeg" if="${libjpeg.build}" description="Prepares the libjpeg sources for the runtime.">
        <antcall target="get-libjpeg-src"/>
        <untar src="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/jpeg-${libjpeg.version}" executable="sh">
            <env key="CC" value="${libjpeg.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/jpeg-${libjpeg.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/jpeg-${libjpeg.version}" executable="make"/>
        <exec dir="${php-target.dir}/jpeg-${libjpeg.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libpng sources for the runtime                          -->
    <!-- ==================================================================== -->
    <target name="build-libpng" if="${libpng.build}" description="Prepares the libpng sources for the runtime.">
        <antcall target="get-libpng-src"/>
        <untar src="${lib.dir}/libpng-${libpng.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libpng-${libpng.version}" executable="sh">
            <env key="CC" value="${libpng.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/libpng-${libpng.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/libpng-${libpng.version}" executable="make"/>
        <exec dir="${php-target.dir}/libpng-${libpng.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libfreetype sources for the runtime                     -->
    <!-- ==================================================================== -->
    <target name="build-libfreetype" if="${libfreetype.build}" description="Prepares the libfreetype sources for the runtime.">
        <antcall target="get-libfreetype-src"/>
        <untar src="${lib.dir}/freetype-${libfreetype.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/freetype-${libfreetype.version}/builds" includes="**/*"/>
        <exec dir="${php-target.dir}/freetype-${libfreetype.version}" executable="sh">
            <env key="CC" value="${libfreetype.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <exec dir="${php-target.dir}/freetype-${libfreetype.version}" executable="make"/>
        <exec dir="${php-target.dir}/freetype-${libfreetype.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libmemcached sources for the runtime                    -->
    <!-- ==================================================================== -->
    <target name="build-libmemcached" if="${libmemcached.build}" description="Prepares the libmemcached sources for the runtime.">
        <antcall target="get-libmemcached-src"/>
        <untar src="${lib.dir}/libmemcached-${libmemcached.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/libmemcached-${libmemcached.version}/build-aux" includes="**/*"/>
        <exec dir="${php-target.dir}/libmemcached-${libmemcached.version}" executable="sh">
            <env key="CC" value="${libmemcached.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <exec dir="${php-target.dir}/libmemcached-${libmemcached.version}" executable="make"/>
        <exec dir="${php-target.dir}/libmemcached-${libmemcached.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libmcrypt sources for the runtime                       -->
    <!-- ==================================================================== -->
    <target name="build-libmcrypt" if="${libmcrypt.build}" description="Prepares the libmcrypt sources for the runtime.">
        <antcall target="get-libmcrypt-src"/>
        <untar src="${lib.dir}/libmcrypt-${libmcrypt.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" executable="sh">
            <env key="CC" value="${libmcrypt.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" executable="make"/>
        <exec dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the readline sources for the runtime                       -->
    <!-- ==================================================================== -->
    <target name="build-readline" if="${readline.build}" description="Prepares the readline sources for the runtime.">
    	<antcall target="get-readline-src"/>
        <untar src="${lib.dir}/readline-${readline.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/readline-${readline.version}" executable="sh">
            <env key="CC" value="${readline.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
    	<!-- BUGFIX: http://techdebug.com/blog/2009/01/03/compiling-readline-on-an-osx-105-intel-x86_64/ -->
    	<replace file="${php-target.dir}/readline-${readline.version}/shlib/Makefile" token="-dynamic" value="-dynamiclib"/>
        <exec dir="${php-target.dir}/readline-${readline.version}" executable="make"/>
        <exec dir="${php-target.dir}/readline-${readline.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libevent sources for the runtime                -->
    <!-- ==================================================================== -->
    <target name="build-libevent" if="${libevent.build}" description="Prepares the libevent sources for the runtime.">
        <antcall target="get-libevent-library-src"/>
        <untar src="${lib.dir}/libevent-${libevent.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libevent-${libevent.version}-stable" executable="sh">
            <env key="CC" value="${libevent.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/libevent-${libevent.version}-stable" includes="install-sh"/>
        <exec dir="${php-target.dir}/libevent-${libevent.version}-stable" executable="make"/>
        <exec dir="${php-target.dir}/libevent-${libevent.version}-stable" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the pcre sources for the runtime                            -->
    <!-- ==================================================================== -->
    <target name="build-pcre" if="${pcre.build}" description="Prepares the pcre sources for the runtime.">
        <antcall target="get-pcre-src"/>
        <untar src="${lib.dir}/pcre-${pcre.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/pcre-${pcre.version}" executable="sh">
            <env key="CC" value="${pcre.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/pcre-${pcre.version}" includes="install-sh"/>
        <chmod perm="755" dir="${php-target.dir}/pcre-${pcre.version}" includes="configure"/>
        <exec dir="${php-target.dir}/pcre-${pcre.version}" executable="make"/>
        <exec dir="${php-target.dir}/pcre-${pcre.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the openssl sources for the runtime                		  -->
    <!-- ==================================================================== -->
    <target name="build-openssl" if="${openssl.build}" description="Prepares the openssl sources for the runtime.">
    	<antcall target="get-openssl-src"/>

    	<copy file="${basedir}/scripts/build_openssl_dylib_${os.architecture}.sh" todir="${php-target.dir}">
            <filterchain>
                <expandproperties/>
            </filterchain>
    	</copy>
        <chmod perm="755" file="${php-target.dir}/build_openssl_dylib_${os.architecture}.sh" />
    	<exec dir="${php-target.dir}" executable="sh">
    		<arg value="build_openssl_dylib_${os.architecture}.sh" />
    	</exec>

    </target>

    <!-- ==================================================================== -->
    <!-- Builds the memcached server binaries                                 -->
    <!-- ==================================================================== -->
    <target name="build-memcached-server" if="${memcached.server.build}" description="Builds the memcached server binaries.">
        <antcall target="get-memcached-server-src"/>
        <untar src="${lib.dir}/memcached-${memcached.server.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/memcached-${memcached.server.version}" executable="sh">
            <env key="CC" value="${memcached.server.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
            <arg value="-with-libevent=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/memcached-${memcached.server.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/memcached-${memcached.server.version}" executable="make"/>
        <exec dir="${php-target.dir}/memcached-${memcached.server.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the httpd server binaries                                     -->
    <!-- ==================================================================== -->
    <target name="build-httpd-server" if="${httpd.server.build}" description="Builds the httpd server binaries.">
        <antcall target="get-httpd-server-src"/>
        <untar src="${lib.dir}/httpd-${httpd.server.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/httpd-${httpd.server.version}/build" includes="**/*"/>
        <exec dir="${php-target.dir}/httpd-${httpd.server.version}" executable="sh">
            <env key="CC" value="${httpd.server.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${httpd.server.compile.prefix}"/>
            <arg value="--with-port=${httpd.server.port}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/httpd-${httpd.server.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/httpd-${httpd.server.version}" executable="make"/>
        <exec dir="${php-target.dir}/httpd-${httpd.server.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the nginx server binaries                                     -->
    <!-- ==================================================================== -->
    <target name="build-nginx-server" if="${nginx.server.build}" description="Builds the nginx server binaries.">
        <antcall target="get-nginx-server-src"/>
        <untar src="${lib.dir}/nginx-${nginx.server.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/nginx-${nginx.server.version}" executable="sh">
            <env key="CC" value="${nginx.server.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${nginx.server.compile.prefix}"/>
            <arg value="--sbin-path=${nginx.server.compile.prefix}/sbin/nginx"/>
            <arg value="--conf-path=${nginx.server.compile.prefix}/etc/nginx/nginx.conf"/>
            <arg value="--error-log-path=${nginx.server.compile.prefix}/var/log/nginx/error.log"/>
            <arg value="--http-log-path=${nginx.server.compile.prefix}/var/log/nginx/access.log"/>
            <arg value="--pid-path=${nginx.server.compile.prefix}/var/run/nginx.pid"/>
            <arg value="--lock-path=${nginx.server.compile.prefix}/var/lock/nginx.lock"/>
            <arg value="--http-client-body-temp-path=${nginx.server.compile.prefix}/var/lib/nginx/body"/>
            <arg value="--http-proxy-temp-path=${nginx.server.compile.prefix}/var/lib/nginx/proxy"/>
            <arg value="--http-fastcgi-temp-path=${nginx.server.compile.prefix}/var/lib/nginx/fastcgi"/>
            <arg value="--http-uwsgi-temp-path=${nginx.server.compile.prefix}/var/lib/nginx/uwsgi"/>
            <arg value="--http-scgi-temp-path=${nginx.server.compile.prefix}/var/lib/nginx/scgi"/>
            <arg value="--with-pcre=${php-target.dir}/pcre-${pcre.version}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/nginx-${nginx.server.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/nginx-${nginx.server.version}" executable="make"/>
        <exec dir="${php-target.dir}/nginx-${nginx.server.version}" executable="make">
            <arg value="install"/>
        </exec>
        <!-- create temporary directory -->
        <mkdir dir="${appserver.compile.prefix}/var/lib/nginx" />
        <!-- delete the unnecessary default html directory -->
        <delete dir="${appserver.compile.prefix}/html"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the redis server binaries                                     -->
    <!-- ==================================================================== -->
    <target name="build-redis-server" if="${redis.server.build}" description="Builds the redis server binaries.">
        <antcall target="get-redis-server-src"/>
        <unzip src="${lib.dir}/redis-${redis.server.version}.zip" dest="${php-target.dir}"/>
        <chmod perm="755" dir="${php-target.dir}/redis-${redis.server.version}" includes="**/*"/>
        <exec dir="${php-target.dir}/redis-${redis.server.version}" executable="make"/>
        <exec dir="${php-target.dir}/redis-${redis.server.version}" executable="make">
            <arg value="PREFIX=${appserver.compile.prefix}"/>
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the PHP Application Server runtime sources                    -->
    <!-- ==================================================================== -->
    <target name="copy-runtime" description="Copies the PHP Application Server runtime sources.">
        <copy todir="${appserver.compile.prefix}" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PHP source for the PHP Application Server runtime         -->
    <!-- ==================================================================== -->
    <target name="build-runtime" depends="prepare-source" description="Compiles the ApplicationServer runtime environment.">

        <!-- delete the application server directory -->
        <delete dir="${appserver.compile.prefix}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>

        <!-- prepare the distribution build system (use the wrapper task to do so) -->
        <antcall target="prepare-${os.distribution}-build-system"/>

        <!-- build the necessary libraries -->
    	<antcall target="build-libjpeg"/>
        <antcall target="build-libpng"/>
        <antcall target="build-libfreetype"/>
        <antcall target="build-libmemcached"/>
        <antcall target="build-libmcrypt"/>
        <antcall target="build-readline"/>
        <antcall target="build-libevent"/>
        <antcall target="build-openssl"/>
        <antcall target="build-pcre"/>
        <antcall target="build-memcached-server"/>
        <antcall target="build-nginx-server"/>
        <antcall target="build-httpd-server"/>
        <antcall target="build-redis-server"/>

    	<!-- prepare the PECL extensions -->
        <antcall target="prepare-pecl-extension"/>

        <!-- compile the PHP sources and PECL extensions static -->
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="make">
            <arg value="clean"/>
        </exec>
        <delete file="${php-target.dir}/php-${appserver.php.version}/aclocal.m4"/>
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="sh">
            <arg value="buildconf"/>
            <arg line="--force"/>
        </exec>

    	<!-- log PHP compile configuration -->
    	<echo message="Now compiling PHP using configure params: ${appserver.compile.configuration}"/>

    	<!-- configure, compile and install PHP binary -->
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="sh">
            <env key="CC" value="${appserver.cc}"/>
            <env key="EXTRA_LIBS" value="-llber"/>
            <arg line="configure ${appserver.compile.configuration}"/>
        </exec>
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="make">
            <arg value="-j8"/>
        </exec>
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="make">
            <arg value="install"/>
        </exec>

        <!-- build the PECL package's as shared library -->
        <antcall target="pecl-build-pthreads"/>
        <antcall target="pecl-build-memcached"/>
    	
    	<!--
        <antcall target="pecl-build-memcache"/>
        -->
    	
        <antcall target="pecl-build-redis"/>
        <antcall target="pecl-build-appserver"/>
        <antcall target="pecl-build-apcu"/>
        <antcall target="pecl-build-ev"/>
        <antcall target="pecl-build-event"/>
        <antcall target="pecl-build-xdebug"/>

    	<!-- copy runtime files from src directory -->
        <antcall target="copy-runtime"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL pthreads as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-pthreads" description="Builds the PECL pthreads as shared extension.">
        <antcall target="get-pthreads-src"/>
        <untar src="${lib.dir}/pthreads-${appserver.pthreads.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/pthreads-${appserver.pthreads.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/pthreads-${appserver.pthreads.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/pthreads-${appserver.pthreads.version}" executable="make"/>
        <exec dir="${php-target.dir}/pthreads-${appserver.pthreads.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL apcu as shared extension                             -->
    <!-- ==================================================================== -->
    <target name="pecl-build-apcu" description="Builds the PECL apcu as shared extension.">
        <antcall target="get-apcu-src"/>
        <untar src="${lib.dir}/apcu-${appserver.apcu.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="make"/>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL memcached as shared extension                        -->
    <!-- ==================================================================== -->
    <target name="pecl-build-memcached" description="Builds the PECL memcached as shared extension.">
        <antcall target="get-memcached-src"/>
        <untar src="${lib.dir}/memcached-${appserver.memcached.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/memcached-${appserver.memcached.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/memcached-${appserver.memcached.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
            <arg value="--with-libmemcached-dir=${libmemcached.dir}"/>
        </exec>
        <exec dir="${php-target.dir}/memcached-${appserver.memcached.version}" executable="make"/>
        <exec dir="${php-target.dir}/memcached-${appserver.memcached.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL memcache as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-memcache" description="Builds the PECL memcache as shared extension.">
        <antcall target="get-memcache-src"/>
        <untar src="${lib.dir}/memcache-${appserver.memcache.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/memcache-${appserver.memcache.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/memcache-${appserver.memcache.version}" executable="sh">
        	<!--
        	<env value="MACOSX_DEPLOYMENT_TARGET=10.8 CFLAGS='-fgnu89-inline' LDFLAGS='-fgnu89-inline' CXXFLAGS='-fgnu89-inline'"/>
            -->
            <arg value=""/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
            <arg value="--with-libmemcached-dir=${libmemcached.dir}"/>
        </exec>
        <exec dir="${php-target.dir}/memcache-${appserver.memcache.version}" executable="make"/>
        <exec dir="${php-target.dir}/memcache-${appserver.memcache.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL operator as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-operator" description="Builds the PECL operator as shared extension.">
        <antcall target="get-operator-src"/>
        <untar src="${lib.dir}/operator-${appserver.operator.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/operator-${appserver.operator.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/operator-${appserver.operator.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/operator-${appserver.operator.version}" executable="make"/>
        <exec dir="${php-target.dir}/operator-${appserver.operator.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL pecl_http as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-pecl_http" description="Builds the PECL pecl_http as shared extension.">
        <antcall target="get-pecl_http-src"/>
        <untar src="${lib.dir}/pecl_http-${appserver.pecl_http.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}" executable="make"/>
        <exec dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL libevent as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-libevent" description="Builds the PECL libevent as shared extension.">
        <antcall target="get-libevent-src"/>
        <untar src="${lib.dir}/libevent-${appserver.libevent.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libevent-${appserver.libevent.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/libevent-${appserver.libevent.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
            <arg value="--with-libevent=${appserver.compile.libevent.libdir}"/>
        </exec>
        <exec dir="${php-target.dir}/libevent-${appserver.libevent.version}" executable="make"/>
        <exec dir="${php-target.dir}/libevent-${appserver.libevent.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL libev as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-libev" description="Builds the PECL libev as shared extension.">
        <antcall target="get-libev-src"/>
        <unzip src="${lib.dir}/libev-${appserver.libev.version}.zip" dest="${php-target.dir}"/>
        <exec dir="${php-target.dir}/php-libev-${appserver.libev.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/php-libev-${appserver.libev.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/php-libev-${appserver.libev.version}" executable="make"/>
        <exec dir="${php-target.dir}/php-libev-${appserver.libev.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL event as shared extension                            -->
    <!-- ==================================================================== -->
    <target name="pecl-build-event" description="Builds the PECL event as shared extension.">
        <antcall target="get-event-src"/>
        <untar src="${lib.dir}/event-${appserver.event.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/event-${appserver.event.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/event-${appserver.event.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        	<arg value="--with-event-libevent-dir=${appserver.compile.prefix}"/>
        </exec>
        <exec dir="${php-target.dir}/event-${appserver.event.version}" executable="make"/>
        <exec dir="${php-target.dir}/event-${appserver.event.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL ev as shared extension                               -->
    <!-- ==================================================================== -->
    <target name="pecl-build-ev" description="Builds the PECL ev as shared extension.">
        <antcall target="get-ev-src"/>
        <untar src="${lib.dir}/ev-${appserver.ev.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/ev-${appserver.ev.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/ev-${appserver.ev.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/ev-${appserver.ev.version}" executable="make"/>
        <exec dir="${php-target.dir}/ev-${appserver.ev.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL AOP as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-AOP" description="Builds the PECL AOP as shared extension.">
        <antcall target="get-AOP-src"/>
        <untar src="${lib.dir}/AOP-${appserver.AOP.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/AOP-${appserver.AOP.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/AOP-${appserver.AOP.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/AOP-${appserver.AOP.version}" executable="make"/>
        <exec dir="${php-target.dir}/AOP-${appserver.AOP.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL xdebug as shared extension                           -->
    <!-- ==================================================================== -->
    <target name="pecl-build-xdebug" description="Builds the PECL xdebug as shared extension.">
        <antcall target="get-xdebug-src"/>
        <untar src="${lib.dir}/xdebug-${appserver.xdebug.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/xdebug-${appserver.xdebug.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/xdebug-${appserver.xdebug.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/xdebug-${appserver.xdebug.version}" executable="make"/>
        <exec dir="${php-target.dir}/xdebug-${appserver.xdebug.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL redis as shared extension                            -->
    <!-- ==================================================================== -->
    <target name="pecl-build-redis" description="Builds the PECL redis as shared extension.">
        <antcall target="get-redis-src"/>
        <untar src="${lib.dir}/redis-${appserver.redis.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/redis-${appserver.redis.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/redis-${appserver.redis.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/redis-${appserver.redis.version}" executable="make"/>
        <exec dir="${php-target.dir}/redis-${appserver.redis.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL appserver as shared extension                        -->
    <!-- ==================================================================== -->
    <target name="pecl-build-appserver" description="Builds the PECL appserver as shared extension.">
        <antcall target="get-ext-appserver-src"/>
        <untar src="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="make"/>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install composer                                                     -->
    <!-- ==================================================================== -->
    <target name="install-composer" depends="build-runtime" description="Install composer.">
        <!-- download the composer installer -->
        <exec dir="${php-target.dir}" executable="curl">
            <arg line="-sS http://getcomposer.org/installer -o installer"/>
        </exec>
        <!-- install composer itself -->
        <exec dir="${php-target.dir}" executable="${appserver.compile.prefix}/bin/php">
            <arg line="installer -- --install-dir ${appserver.compile.prefix}/bin"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install ApplicationServer packages                                   -->
    <!-- ==================================================================== -->
	<target name="install-sources" depends="install-composer" description="Install ApplicationServer packages.">
        <exec dir="${appserver.compile.prefix}/app/code" executable="${appserver.compile.prefix}/bin/php">
            <arg line="${appserver.compile.prefix}/bin/composer.phar --no-interaction update"/>
        </exec>
	</target>

    <!-- ==================================================================== -->
    <!-- Install the ApplicationServer demo project                           -->
    <!-- ==================================================================== -->
    <target name="install-demo-project" depends="install-sources" description="Install the ApplicationServer demo project.">
        <exec dir="${appserver.compile.prefix}" executable="${appserver.compile.prefix}/bin/php">
            <arg line="${appserver.compile.prefix}/bin/composer.phar --no-interaction create-project techdivision/techdivision_applicationserverproject ${appserver.compile.prefix}/webapps/demo dev-master"/>
        </exec>
    	<!-- we'll also deliver the default webapps -->
    	<antcall target="deploy-default-webapps" />
    </target>

    <!-- ==================================================================== -->
    <!-- Deploys the ApplicationServer default webapps               		  -->
    <!-- ==================================================================== -->
	<target name="deploy-default-webapps" description="Deploys the ApplicationServer default webapps.">
    	<copy todir="${appserver.compile.prefix}/deploy">
    		<fileset dir="${basedir}/webapps">
    			<include name="*-${appserver.version}.phar"/>
    		</fileset>
    		<globmapper from="*-${appserver.version}.phar" to="*.phar"/>
    	</copy>
		<touch file="foo">
    		<fileset dir="${appserver.compile.prefix}/deploy">
    			<include name="*.phar"/>
    		</fileset>
			<globmapper from="*.phar" to="${appserver.compile.prefix}/deploy/*.phar.dodeploy"/>
	  	</touch>
	</target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the debian runtime          -->
    <!--                                                                      -->
    <!-- This is a wrapper for all distribution prepare tasks, as they have   -->
    <!-- similar dependencies as the main build-runtime task. So we wrap it   -->
    <!-- away to avoid ant dependency messups.                                -->
    <!-- ==================================================================== -->
    <target name="prepare-linux-build-system" depends="prepare" description="Install the necessary libraries to build the needed linux distribution runtime.">

        <!-- prepare the distribution build system -->
        <antcall target="prepare-${os.distribution}-build-system"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the debian runtime          -->
    <!-- ==================================================================== -->
    <target name="prepare-debian-build-system" if="${prepare.distribution.build}" description="Install the necessary libraries to build the debian runtime.">
	<exec dir="${php-target.dir}" executable="apt-get" inputstring="Y">
            <arg value="install"/>
            <arg value="ant"/>
            <arg value="autoconf"/>
		    <arg value="make"/>
            <arg value="curl"/>
            <arg value="bison"/>
            <arg value="libxml2-dev"/>
            <arg value="libssl-dev"/>
            <arg value="pkg-config"/>
            <arg value="libbz2-dev"/>
            <arg value="libjpeg8-dev"/>
            <arg value="libpng-dev"/>
            <arg value="libfreetype6-dev"/>
            <arg value="libmcrypt-dev"/>
            <arg value="libmemcached-dev"/>
            <arg value="git-core"/>
            <arg value="libxpm-dev"/>
            <arg value="libc-client2007e-dev"/>
            <arg value="libpcre3-dev"/>
            <arg value="libpng12-dev"/>
            <arg value="libcurl4-openssl-dev"/>
            <arg value="libpng12-dev"/>
            <arg value="libevent-dev"/>
            <arg value="libev-dev"/>
        	<arg value="libldap2-dev"/>
        </exec>
    	<!-- Bugfix for missing symlink -->
    	<exec dir="/usr/lib" executable="ln">
    		<arg value="-s"/>
    		<arg value="${libldap.dir}/libldap.so"/>
    	</exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the raspbian runtime        -->
    <!--                                                                      -->
    <!-- We don't need normal dependencies, as we wrap the debian preparation -->
    <!-- ==================================================================== -->
    <target name="prepare-raspbian-build-system" if="${prepare.distribution.build}" depends="prepare-debian-build-system" description="Install the necessary libraries to build the raspbian runtime.">

        <!-- Only a wrapper, as steps are the same as in the prepare-debian-build-system task -->

    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the fedora runtime          -->
    <!-- ==================================================================== -->
    <target name="prepare-fedora-build-system" if="${prepare.distribution.build}" description="Install the necessary libraries to build the fedora runtime.">
        <exec dir="${php-target.dir}" executable="yum" inputstring="Y">
            <arg value="install"/>
            <arg value="ant"/>
            <arg value="autoconf"/>
            <arg value="curl"/>
            <arg value="bison"/>
            <arg value="libxml2"/>
            <arg value="libxml2-devel"/>
            <arg value="openssl-devel"/>
            <arg value="bzip2-devel"/>
            <arg value="libjpeg-turbo-devel"/>
            <arg value="libpng-devel"/>
            <arg value="freetype-devel"/>
            <arg value="libmcrypt-devel"/>
            <arg value="libmemcached-devel"/>
            <arg value="libXpm-devel"/>
            <arg value="pcre-devel"/>
            <arg value="libpng-devel"/>
            <arg value="libcurl-devel"/>
            <arg value="libpng-devel"/>
            <arg value="libevent-devel"/>
            <arg value="libev-devel"/>
            <arg value="gcc-c++"/>
            <arg value="openldap-devel"/>
            <arg value="rpm-build"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copy build files to target directory                                 -->
    <!-- ==================================================================== -->
    <target name="move-build-to-target" description="Copies build files to target directory.">
        <mkdir dir="${php-target.dir}/re/opt" />
    	<exec dir="${php-target.dir}" executable="mv">
    		<arg value="${appserver.compile.prefix}"/>
    		<arg value="${php-target.dir}/re/opt"/>
    	</exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a DEB package with the local ApplicationServer runtime    -->
    <!-- ==================================================================== -->
    <target name="create-deb" depends="install-demo-project" description="Creates a DEB package with the local ApplicationServer runtime.">
        <!-- copy build files to target directory -->
        <antcall target="move-build-to-target"/>

        <!-- copy init scripts to required directory -->
        <copy todir="${php-target.dir}/re">
            <fileset dir="${basedir}/buildfiles/debian">
                <include name="**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <chmod perm="755" file="${php-target.dir}/re/DEBIAN/postinst" />
        <exec dir="${php-target.dir}" executable="dpkg-deb">
            <arg line="--build ${php-target.dir}/re appserver_${appserver.version}_${appserver.architecture}.deb"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a RPM package with the local ApplicationServer runtime       -->
    <!-- ==================================================================== -->
    <target name="create-rpm" depends="install-demo-project" description="Creates a RPM package with the local ApplicationServer runtime.">
        <!-- copy build files to target directory -->
        <antcall target="move-build-to-target"/>

        <copy todir="${php-target.dir}/re">
            <fileset dir="${basedir}/buildfiles/fedora">
                <include name="**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <exec dir="${php-target.dir}" executable="rpmbuild" failonerror="true">
            <arg line="--buildroot ${php-target.dir}/re -bb ${php-target.dir}/re/rpmbuild/SPECS/appserver.spec"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a .pkg package with the local ApplicationServer runtime      -->
    <!-- ==================================================================== -->
    <target name="create-pkg" depends="install-demo-project" description="Creates a .pkg package with the local ApplicationServer runtime.">
        <!-- copy build files to target directory -->
        <antcall target="move-build-to-target"/>
        <!-- copy plist files to required directory -->
        <copy todir="${php-target.dir}/re">
            <fileset dir="${basedir}/buildfiles/macosx/plist">
                <include name="**/*"/>
            </fileset>
        </copy>
        <!-- create the .pkg file -->
        <exec dir="${basedir}" executable="pkgbuild">
            <arg value="--root"/>
            <arg value="${php-target.dir}/re"/>
            <arg value="--scripts"/>
            <arg value="${basedir}/buildfiles/macosx/scripts"/>
            <arg value="--install-location"/>
            <arg value="/"/>
            <arg value="--version"/>
            <arg value="${appserver.version}"/>
            <arg value="--identifier"/>
            <arg value="com.techdivision.appserver"/>
            <arg value="${php-target.dir}/ApplicationServer-${appserver.version}.pkg"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Deploys all packages related to the appserver base to               -->
    <!-- ==================================================================== -->
    <target name="deploy-all">
        <parallel>
            <exec dir="${basedir}" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_ApplicationServer" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_MessageQueue" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_MessageQueueClient" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_PersistenceContainer" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_PersistenceContainerClient" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_ServletContainer" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_Socket" executable="ant"><arg value="deploy" /></exec>
            <exec dir="${basedir}/../TechDivision_Stream" executable="ant"><arg value="deploy" /></exec>
       </parallel>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows PHP binaries has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="WIN-check-php-binaries-present" description="Check if Windows PHP binaries has been downloaded yet.">
        <available file="${lib.dir}/php-${appserver.php.version}-Win32-VC11-x86.zip" property="win-php-binaries.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get Windows PHP binaries package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="WIN-get-php-binaries" depends="WIN-check-php-binaries-present" unless="${win-php-binaries.present}" description="Get Windows PHP binaries package by given version number.">
        <get src="${win.php.download.url}" dest="${lib.dir}/php-${appserver.php.version}-Win32-VC11-x86.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows apcu binaries has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="WIN-check-apcu-binaries-present" description="Check if Windows apcu binaries has been downloaded yet.">
        <available file="${lib.dir}/php_apcu-${appserver.apcu.version}-5.5-ts-vc11-x86.zip" property="win-apcu-binaries.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows event binaries has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="WIN-check-event-binaries-present" description="Check if Windows event binaries has been downloaded yet.">
        <available file="${lib.dir}/php_event-${appserver.event.version}-5.5-ts-vc11-x86.zip" property="win-event-binaries.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get Windows apcu binaries package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="WIN-get-apcu-binaries" depends="WIN-check-apcu-binaries-present" unless="${win-apcu-binaries.present}" description="Get Windows apcu binaries package by given version number.">
        <get src="${win.apcu.download.url}" dest="${lib.dir}/php_apcu-${appserver.apcu.version}-5.5-ts-vc11-x86.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows pthreads binaries has been downloaded yet   		  -->
    <!-- ==================================================================== -->
    <target name="WIN-check-pthreads-binaries-present" description="Check if Windows pthreads binaries has been downloaded yet.">
        <available file="${lib.dir}/php_pthreads-${appserver.pthreads.version}-5.5-ts-vc11-x86.zip" property="win-pthreads-binaries.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get Windows pthreads binaries package by given version number		  -->
    <!-- ==================================================================== -->
    <target name="WIN-get-pthreads-binaries" depends="WIN-check-pthreads-binaries-present" unless="${win-pthreads-binaries.present}" description="Get Windows pthreads binaries package by given version number.">
        <get src="${win.pthreads.download.url}" dest="${lib.dir}/php_pthreads-${appserver.pthreads.version}-5.5-ts-vc11-x86.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get Windows event binaries package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="WIN-get-event-binaries" depends="WIN-check-event-binaries-present" unless="${win-event-binaries.present}" description="Get Windows event binaries package by given version number.">
        <get src="${win.event.download.url}" dest="${lib.dir}/php_event-${appserver.event.version}-5.5-ts-vc11-x86.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PHP/PECL Windows binaries 							  -->
    <!-- ==================================================================== -->
	<target name="WIN-prepare-binaries" depends="prepare" description="Prepares the PHP/PECL Windows binaries.">
		<!-- download the PHP/PECL binaries if not already available -->
		<antcall target="WIN-get-php-binaries"/>
        <antcall target="WIN-get-apcu-binaries"/>
        <antcall target="WIN-get-pthreads-binaries"/>
        <antcall target="WIN-get-event-binaries"/>
		<!-- extract the PHP/PECL binaries into the target folder -->
        <unzip src="${lib.dir}/php-${appserver.php.version}-Win32-VC11-x86.zip" dest="${php-target.dir}/appserver/php"/>
        <unzip src="${lib.dir}/php_apcu-${appserver.apcu.version}-5.5-ts-vc11-x86.zip" dest="${php-target.dir}/apcu"/>
        <unzip src="${lib.dir}/php_pthreads-${appserver.pthreads.version}-5.5-ts-vc11-x86.zip" dest="${php-target.dir}/pthreads"/>
        <unzip src="${lib.dir}/php_event-${appserver.event.version}-5.5-ts-vc11-x86.zip" dest="${php-target.dir}/event"/>
		<!-- copy the DLL's to the PHP ext directory -->
		<copy file="${php-target.dir}/apcu/php_apcu.dll" todir="${php-target.dir}/appserver/php/ext"/>
		<copy file="${php-target.dir}/pthreads/php_pthreads.dll" todir="${php-target.dir}/appserver/php/ext"/>
		<copy file="${php-target.dir}/pthreads/pthreadVC2.dll" todir="${php-target.dir}/appserver/php"/>
		<copy file="${php-target.dir}/event/php_event.dll" todir="${php-target.dir}/appserver/php/ext"/>
		<!-- copy the appserver DLL to the PHP ext directory -->
		<copy file="${custom-lib.dir}/php_appserver-${appserver.ext-appserver.version}.dll" tofile="${php-target.dir}/appserver/php/ext/php_appserver.dll"/>
		<!-- copy runtime sources to target directory -->
        <copy todir="${php-target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*" />
                <exclude name="etc/**/*"/>
            </fileset>
        </copy>
        <copy todir="${php-target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="etc/**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
		<!-- copy windows related files to the target directory -->
        <copy todir="${php-target.dir}">
            <fileset dir="${basedir}/buildfiles/win">
                <include name="**/*"/>
            	<exclude name="appserver-izpack.xml"/>
            </fileset>
        </copy>
		<!-- copy IzPack configuration file to the target directory -->
        <copy todir="${php-target.dir}" file="${basedir}/buildfiles/win/appserver-izpack.xml">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
		<!-- download and install composer -->
		<get src="${win.composer.download.url}" dest="${php-target.dir}/installer"/>
        <exec dir="${php-target.dir}" executable="${php-target.dir}/appserver/php/php">
            <arg line="installer -- --install-dir ${php-target.dir}/appserver/bin"/>
        </exec>
		<!-- install appserver libraries with composer -->
        <exec dir="${php-target.dir}/appserver/app/code" executable="${php-target.dir}/appserver/php/php">
            <arg line="${php-target.dir}/appserver/bin/composer.phar --no-interaction update"/>
        </exec>
		<!-- install the demo application -->
        <exec dir="${php-target.dir}/appserver" executable="${php-target.dir}/appserver/php/php">
            <arg line="${php-target.dir}/appserver/bin/composer.phar --no-interaction create-project --keep-vcs techdivision/techdivision_applicationserverproject ${php-target.dir}/appserver/webapps/demo dev-master"/>
        </exec>
		<!-- copy API/Admin + example phars -->
    	<copy todir="${php-target.dir}/appserver/deploy">
    		<fileset dir="${basedir}/webapps">
    			<include name="*-${appserver.version}.phar"/>
    		</fileset>
    		<globmapper from="*-${appserver.version}.phar" to="*.phar"/>
    	</copy>
		<!-- create the .dodeploy files -->
        <touch file="foo">
            <fileset dir="${php-target.dir}/appserver/deploy">
                <include name="*.phar"/>
            </fileset>
            <globmapper from="*.phar" to="${php-target.dir}/appserver/deploy/*.phar.dodeploy"/>
        </touch>
	</target>

    <!-- ==================================================================== -->
    <!-- Creates the IzPack installer JAR file 					      		  -->
    <!-- ==================================================================== -->
	<target name="WIN-create-jar" description="Creates the IzPack installer JAR file.">
		<!-- prepare the PHP/PECL binaries + appserver sources -->
		<antcall target="WIN-prepare-binaries"/>
		<!-- extend the classpath with the IzPack JAR's -->
		<path id="build.classpath">
	        <fileset dir="${izpack.installation.dir}">
	            <include name="lib/*.jar" />
	        </fileset>
	    </path>
		<!-- declare the IzPack task -->
	    <taskdef name="izpack" classpathref="build.classpath" classname="com.izforge.izpack.ant.IzPackTask" />
		<!-- create the IzPack installer JAR file -->
        <izpack input="${php-target.dir}\appserver-izpack.xml"
                output="${php-target.dir}\appserver-${appserver.version}.jar"
                installerType="standard"
                inheritAll="true"
                basedir="${php-target.dir}"
                izPackDir=" ${izpack.installation.dir}" />
    </target>

</project>
